// prisma/schema.prisma
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================
// MODELS
// ===========================

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  appointments Appointment[]

  @@map("users") // maps to "users" table in PostgreSQL
}

model Doctor {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String
  speciality  String
  bio         String?
  imageUrl    String
  gender      Gender
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  appointments Appointment[]

  @@map("doctors")
}

model Appointment {
  id          String            @id @default(cuid())
  date        DateTime
  time        String
  duration    Int               @default(30)
  status      AppointmentStatus @default(CONFIRMED)
  notes       String?
  reason      String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Foreign keys
  userId   String
  doctorId String

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

// ===========================
// ENUMS
// ===========================

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  CONFIRMED
  COMPLETED
}